package main

/*
Напишите программу, которая выводит квадраты натуральных чисел от 1 до 10.
Квадрат каждого числа должен выводится в новой строке.
 */

import "fmt"

func main()  {

	for i := 1; i <= 10; i ++ {
		fmt.Println(i * i)
	}
}

/*
Требуется написать программу, при выполнении которой с клавиатуры считываются два натуральных числа A и B
(каждое не более 100, A < B). Вывести сумму всех чисел от A до B  включительно.
 */

func main()  {
	var A, B, C int

	fmt.Scan(&A, &B)
	if A < B && A < 100 && B < 100 {
		for i := A; i <= B; i ++ {
			C = i + C
		}
		fmt.Println(C)
	}
}

/*
Напишите программу, которая в последовательности чисел находит сумму двузначных чисел, кратных 8.
Программа в первой строке получает на вход число n - количество чисел в последовательности,
во второй строке -- n чисел, входящих в данную последовательность.
 */

func main()  {

	var a, b int
	sum := 0

	fmt.Scan(&a)

	for i := 1; i <= a; i++ {
		fmt.Scan(&b)
		if b > 9 && b < 100 && b % 8 == 0 {
			sum += b
		}
	}
	fmt.Println(sum)
}

/*
Последовательность состоит из натуральных чисел и завершается числом 0.
Определите количество элементов этой последовательности, которые равны ее наибольшему элементу.

Формат входных данных
Вводится непустая последовательность натуральных чисел,
оканчивающаяся числом 0 (само число 0 в последовательность не входит, а служит как признак ее окончания).

Формат выходных данных

Выведите ответ на задачу.
 */

func main(){
	var i int

	max := 0
	counter := 0

	for fmt.Scan(&i); i != 0; fmt.Scan(&i){

		if i > max {
			max = i
			counter = 0
		}
		if i == max {
			counter += 1
		}
	}
	fmt.Println(counter)
}

/*
Найдите первое число от 1 до n включительно, кратное c, но НЕ кратное d.

Входные данные

Вводится 3 натуральных числа n, c, d, каждое из которых не превышает 10000.

Выходные данные
Вывести первое число от 1 до n включительно, кратное c, но НЕ кратное d. Если такого числа нет - выводить ничего не нужно.
 */

func main() {

	var n, c, d int
	result := 0

	fmt.Scan(&n, &c, &d)

	for i := 1; i <= n; i++ {

		if i % c == 0 && i % d != 0 {
			result = i
			fmt.Println(result)
			break
		}
	}
}

/*
Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

Для каждого введённого числа проверить:

если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.
 */

func main() {

	var n int

	for i := 1; n < 100; i++ {

		fmt.Scan(&n)

		if n < 10 {
			continue
		} else if n > 100 {
			break
		} else {
			fmt.Println(n)
		}
	}
}

/*
Вклад в банке составляет x рублей. Ежегодно он увеличивается на p процентов, после чего дробная часть копеек отбрасывается.
Каждый год сумма вклада становится больше. Определите, через сколько лет вклад составит не менее y рублей.

Входные данные

Программа получает на вход три натуральных числа: x, p, y.

Выходные данные

Программа должна вывести одно целое число.
 */
func main() {

	var x, p, y int
	year := 0

	fmt.Scan(&x, &p, &y)

	for i:= 1; x < y; i++{

		x = x * (100 + p) / 100

		year +=1
	}
	fmt.Println(year)
}

/*
Даны два числа. Определить цифры, входящие в запись как первого, так и второго числа.

Входные данные

Программа получает на вход два числа. Гарантируется, что цифры в числах не повторяются. Числа в пределах от 0 до 10000.

Выходные данные

Программа должна вывести цифры, которые имеются в обоих числах, через пробел.
Цифры выводятся в порядке их нахождения в первом числе.

Внимание! Если вам сложно решить эту задачу, пропустите и изучайте материал дальше, затем вернетесь к этой задаче позже.
 */

func main() {

	var a, b int

	var numA1, numA2, numA3, numA4, numA5 int

	var numB1, numB2, numB3, numB4, numB5 int

	fmt.Scan(&a, &b)

	numA1 = a / 10000
	numA2 = (a / 1000) % 10
	numA3 = (a / 100) % 10
	numA4 = (a / 10) % 10
	numA5 = a % 10

	numB1 = b / 10000
	numB2 = (b / 1000) % 10
	numB3 = (b / 100) % 10
	numB4 = (b / 10) % 10
	numB5 = b % 10

	var numbers1 []int = []int{numA1, numA2, numA3, numA4, numA5}
	var numbers2 []int = []int{numB1, numB2, numB3, numB4, numB5}

	for i := 1; i != 5; i++ {

		for j := 1; j != 5; j++ {

			if numbers1[i] == numbers2[j] && numbers1[i] != 0 && numbers2[j] != 0 {

				fmt.Print(numbers1[i], " ")

			}

		}

	}

}